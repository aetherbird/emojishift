#!/usr/bin/env python3

import sys
import argparse

interactive_mode = False
input_parse_level = "2"

argparser = argparse.ArgumentParser(description="emojishift: translate text to emoji")
argparser.add_argument(
    "-l", "--light", "-1", action="store_const", const="1", dest="parse_level",
    help="light: letters and text only"
)
argparser.add_argument(
    "-s", "--standard", "-2", action="store_const", const="2", dest="parse_level",
    help="standard: apply glyphs and letters"
)
argparser.add_argument(
    "-a", "--alternate", "-3", action="store_const", const="3", dest="parse_level",
    help="alternate: apply glyphs and alternate unicode"
)
argparser.add_argument(
    "-d", "--deep", "-4", action="store_const", const="4", dest="parse_level",
    help="deep: apply maximum glyphing"
)

passedargs = argparser.parse_args()
if passedargs.parse_level:
    input_parse_level = passedargs.parse_level

# isatty will return False if input is piped in
if sys.stdin.isatty():
    interactive_mode = True
else:
    string_to_shift = sys.stdin.read().strip()

if interactive_mode == True:
    input_forstring = input("Define Input > ")
    print(f"\n\nTranslation Level: \n\n1. Light: Letters and text only\n2. Standard: Apply glyphs and letters\n3. Alternate: Apply glyphs and alternate unicode\n4. Deep: Apply maximum glyphing\n\n")
    input_parse_level = input("Select your translation level (default 2):")
    string_to_shift = str(input_forstring)
    if not input_parse_level:
        input_parse_level = "2"

    if input_parse_level not in ["1", "2", "3", "4"]:
        print("Invalid input, defaulting to standard parse (2)")
        input_parse_level = "2"

alpha_translation_dict_std = {
    "a": "🇦",
    "b": "🇧",
    "c": "🇨",
    "d": "🇩",
    "e": "🇪",
    "f": "🇫",
    "g": "🇬",
    "h": "🇭",
    "i": "🇮",
    "j": "🇯",
    "k": "🇰",
    "l": "🇱",
    "m": "🇲",
    "n": "🇳",
    "o": "🇴",
    "p": "🇵",
    "q": "🇶",
    "r": "🇷",
    "s": "🇸",
    "t": "🇹",
    "u": "🇺",
    "v": "🇻",
    "w": "🇼",
    "x": "🇽",
    "y": "🇾",
    "z": "🇿"
}

translation_dict_digits = {
    "0": "0️⃣",
    "1": "1️⃣",
    "2": "2️⃣",
    "3": "3️⃣",
    "4": "4️⃣",
    "5": "5️⃣",
    "6": "6️⃣",
    "7": "7️⃣",
    "8": "8️⃣",
    "9": "9️⃣"
}

translation_dict_symbols = {
    "$": "💲",
    ".": "⏺",
    "#": "#️⃣",
    "*": "✳️",
    "+": "➕",
    "-": "➖",
    "/": "➗",
    "=": "🟰",
    "?": "❓",
    "!": "❗",
    "%": "💯",
    "&": "🔗",
    "@": "📧",
    "^": "🔼"
}

translation_dict_alt_letters = {
    "a": "🅰️",
    "b": "🅱️",
    "c": "🅲",
    "d": "🅳",
    "e": "🅴",
    "f": "🅵",
    "g": "🅶",
    "h": "🅷",
    "i": "🅸",
    "j": "🅹",
    "k": "🅺",
    "l": "🅻",
    "m": "🅼",
    "n": "🅽",
    "o": "🅾️",
    "p": "🅿️",
    "q": "🆀",
    "r": "🆁",
    "s": "🆂",
    "t": "🆃",
    "u": "🆄",
    "v": "🆅",
    "w": "🆆",
    "x": "🆇",
    "y": "🆈",
    "z": "🆉"
}

def light_parse(string_to_shift):
    for in_a, out_a in alpha_translation_dict_std.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_digits.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    return string_to_shift

def standard_parse(string_to_shift):
    for in_a, out_a in alpha_translation_dict_std.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_digits.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_symbols.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    return string_to_shift

def alternate_parse(string_to_shift):
    for in_a, out_a in translation_dict_alt_letters.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_digits.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_symbols.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    return string_to_shift

def deep_parse(string_to_shift):
    for in_a, out_a in alpha_translation_dict_std.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_digits.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    for in_a, out_a in translation_dict_symbols.items():
        string_to_shift = string_to_shift.replace(in_a, out_a)
    return string_to_shift

if input_parse_level == "1":
    string_to_shift = light_parse(string_to_shift)
elif input_parse_level == "2":
    string_to_shift = standard_parse(string_to_shift)
elif input_parse_level == "3":
    string_to_shift = alternate_parse(string_to_shift)
elif input_parse_level == "4":
    string_to_shift = deep_parse(string_to_shift)

if interactive_mode == True:
    print(f" > {string_to_shift}")
else:
    print(string_to_shift)

